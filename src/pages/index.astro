---
import MainLayout from '../layouts/Layout.astro';

interface Frontmatter {
  title: string;
  sections: Section[];
  description?: string;
  media?: string; // Add media here

}

interface Section {
  type: string;
  field1?: string;
  field2?: string;
  content?: string;
  quotes?: Quote[];
  projects?: string[];
}

interface Quote {
  quote: string;
  author: string;
}

interface Project {
  title: string;
  description: string;
  url: string;
  media?: string; // Add media property to Project interface
}

interface MarkdownFile {
  frontmatter: Frontmatter;
  default: any;
}

const allPages = import.meta.glob<MarkdownFile>('../data/**/*.md', { eager: true });
const allProjects = import.meta.glob<MarkdownFile>('../data/projects/*.md', { eager: true });

const post = allPages['../data/home/home.md'];

if (!post) {
  console.error('Post not found');
} else {
  console.log('Post found:', post);
}

const data = post?.frontmatter || { title: 'Home Page', sections: [] };
const Content = post?.default || 'Content not found.';

const projectsMap = Object.values(allProjects).reduce((map, project) => {
  map[project.frontmatter.title] = {
    title: project.frontmatter.title,
    description: project.frontmatter.description || '',
    url: `/projects/${project.frontmatter.title.toLowerCase().replace(/\s+/g, '-')}`,
    media: project.frontmatter.media || '', // Add media to projectsMap
  };
  return map;
}, {} as Record<string, Project>);

function getCleanProjectName(url: string): string {
  return url.replace('/projects/', '');
}

---

<MainLayout title={data.title}>
  <h1>{data.title}</h1>

  {data.sections.map((section) => {
    if (section.type === 'introduction') {
      return (
        <div>
          <h2>{section.field1}</h2>
          <p>{section.field2}</p>
        </div>
      );
    } else if (section.type === 'largeParagraph') {
      return (
        <div>
          <p>{section.content}</p>
        </div>
      );
    } else if (section.type === 'quotes' && section.quotes) {
      return (
        <div>
          {section.quotes.map((quote) => (
            <blockquote>
              <p>"{quote.quote}"</p>
              <footer>â€” {quote.author}</footer>
            </blockquote>
          ))}
        </div>
      );
    } else if (section.type === 'projects' && section.projects) {
      return (
        <div>
          <h2>Projects</h2>
          <ul>
            {section.projects.map((projectTitle) => {
              const project = projectsMap[projectTitle];
              const cleanProjectName = getCleanProjectName(project.url); // Get clean project name
              return (
                <li>
                  <a href={project.url}>{project.title}</a>
                  <p>{project.description}</p>
                  <div id={cleanProjectName}>
                    {project.media && project.media.endsWith('.mp4') ? (
                      <video autoplay muted playsinline loop transition:persist transition:name={cleanProjectName}>
                        <source src={project.media} type="video/mp4" />
                        Your browser does not support the video tag.
                      </video>
                    ) : project.media ? (
                      <img src={project.media} alt={project.title} />
                    ) : null}
                  </div>
                </li>
              );
            })}

          </ul>
        </div>
      );
    }
  })}
</MainLayout>

---
import MainLayout from '../layouts/HomepageLayout.astro';
import ProjectItem from '../components/ProjectItem.astro'; // Import the component
import Quotes from '../components/Quotes.astro'; // Import the Quotes component

interface Frontmatter {
  title: string;
  sections: Section[];
  description?: string;
  media?: string; // Add media here
}

interface Section {
  type: string;
  introField1?: string;
  introField2?: string;
  footerField1?: string;
  footerField2?: string;
  footerField3?: string;
  content?: string;
  quotes?: Quote[];
  additionalParagraph?: { content: string };
  projects?: string[];
  media?: string; // Add media to Section interface
}

interface Quote {
  quote: string;
  author: string;
}

interface Project {
  title: string;
  description: string;
  url: string;
  media?: string; // Add media property to Project interface
}

interface MarkdownFile {
  frontmatter: Frontmatter;
  default: any;
}

const allPages = import.meta.glob<MarkdownFile>('../data/**/*.md', { eager: true });
const allProjects = import.meta.glob<MarkdownFile>('../data/projects/*.md', { eager: true });

const post = allPages['../data/home/home.md'];

if (!post) {
  console.error('Post not found');
} else {
  console.log('Post found:', post);
}

const data = post?.frontmatter || { title: 'Home Page', sections: [] };
const Content = post?.default || 'Content not found.';

const projectsMap = Object.values(allProjects).reduce((map, project) => {
  map[project.frontmatter.title] = {
    title: project.frontmatter.title,
    description: project.frontmatter.description || '',
    url: `/projects/${project.frontmatter.title.toLowerCase().replace(/\s+/g, '-')}`,
    media: project.frontmatter.media || '', // Add media to projectsMap
  };
  return map;
}, {} as Record<string, Project>);

function getCleanProjectName(url: string): string {
  return url.replace('/projects/', '');
}
const isHomePage = true;

---

<MainLayout title={data.title} isHomePage={isHomePage}>

  {data.sections.map((section) => {
    if (section.type === 'introduction') {
      return (
        <section class="relative w-full h-screen">
          {section.media && (
            <>
              {section.media.endsWith('.mp4') ? (
                <video autoplay muted playsinline loop class="absolute inset-0 w-full h-full object-cover">
                  <source src={section.media} type="video/mp4" />
                </video>
              ) : (
                <img src={section.media} class="absolute inset-0 w-full h-full object-cover" alt="Introduction Visual" />
              )}
            </>
          )}
          <div data-speed="1.3" class="intro-mp">
            <img src="./images/mass-appeal.svg" alt="Mass Appeal" />
          </div>
          <div data-speed="1.2" class="globe">
            <div class="globe-offset">
              <img class="absolute rotate-infinite w-full h-full" src="./images/globe-text.svg" alt="Mass Appeal" />
              <img class="absolute w-full h-full" src="./images/globe.svg" alt="Mass Appeal" />
            </div>
          </div>  
          <div data-speed="1.25" class="intro-copy elevated ">{section.introField1}</div>
          <div data-speed="1.25" class="intro-copy since">{section.introField2}</div>

          <div class="absolute bottom-36 sm:bottom-24 left-[10vw] sm:left-[30vw] cursor-pointer mix-blend-difference z-40" data-speed="1.38" data-arrow-down data-link>
            <div class="w-28 h-28 sm:w-36 sm:h-36 xl:w-44 xl:h-44 2xl:w-52 2xl:h-52 border border-white rounded-full transition-color-border duration-300 ease-in-out hover:bg-massyellow hover:border-massyellow">
              <div class="w-full h-full flex flex-col justify-center items-center mix-blend-difference">
                <img src="./images/arrow-up.svg" class="rotate-180" alt="Scroll Down" />
              </div>
            </div>
          </div>
        </section>
      );
    } else if (section.type === 'largeParagraph') {
      return (
        <section class="min-h-screen w-full flex items-center justify-center">
          <h1 class="breaker transform">{section.content}</h1>
        </section>
      );
    } else if (section.type === 'quotes' && section.quotes) {
      return <Quotes quotes={section.quotes} additionalParagraph={section.additionalParagraph} />;
    } else if (section.type === 'projects' && section.projects) {
      return (
        <>
          {section.projects.map((projectTitle) => {
            const project = projectsMap[projectTitle];
            const cleanProjectName = getCleanProjectName(project.url); // Get clean project name

            return (
              <ProjectItem
                title={project.title}
                description={project.description}
                url={project.url}
                media={project.media}
                cleanProjectName={cleanProjectName}
              />
            );
          })}
        </>
      );
    } else if (section.type === 'footer') {
      return (
        <footer class="relative w-full h-screen bg-black text-white">
          {section.media && (
            <>
              {section.media.endsWith('.mp4') ? (
                <video autoplay muted playsinline loop class="absolute inset-0 w-full h-full object-cover">
                  <source src={section.media} type="video/mp4" />
                </video>
              ) : (
                <img src={section.media} class="absolute inset-0 w-full h-full object-cover" alt="Footer Visual" />
              )}
            </>
          )}
          <div class="relative z-10 flex flex-col items-center justify-center h-full text-center p-8">
            <h2 class="text-2xl font-bold mb-4">{section.footerField1}</h2>
            <p class="mb-2">{section.footerField2}</p>
            <p>{section.footerField3}</p>
          </div>
        </footer>
      );
    }
  })}

</MainLayout>

---
// Quotes.astro

interface Quote {
  quote: string;
  author: string;
}

interface Props {
  quotes: Quote[];
  additionalParagraph?: { content: string };

}

const { quotes,additionalParagraph } = Astro.props;

// Function to generate the alternating rotation values
function generateRotation(index: number): number {
  const randomValue = Math.floor(Math.random() * 5) + 1; // Random number between 1 and 5
  return index % 2 === 0 ? -randomValue : randomValue; // Negative for even index, positive for odd
}

---

<section class="h-[200vh] border border-red-700">
  {quotes.map((quote, index) => {
    const bgColor = index % 3 === 0 ? 'bg-massyellow text-black' :
                    index % 3 === 1 ? 'bg-white text-black' :
                    'bg-massblue text-white';

    // Generate rotation value
    const rotation = generateRotation(index);
    
    return (
      <div data-stripe-text data-stripe-text-rotate={rotation} class={`${bgColor} stripe stripe-text`}>
        <p class="stripe-text">"{quote.quote}"</p>
        <span class="stripe-label w-max">- {quote.author}</span>
      </div>
    );
  })}

{additionalParagraph && (

         <div class="min-h-screen w-full flex items-center justify-center">
          <h1 class="breaker transform">{additionalParagraph.content}</h1>
        </div>
)}

</section>


